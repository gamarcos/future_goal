// Generated by Dagger (https://dagger.dev).
package br.com.gabrielmarcos.core.di;

import android.content.Context;
import br.com.gabrielmarcos.core.database.GoalDAO;
import br.com.gabrielmarcos.core.database.GoalDatabase;
import br.com.gabrielmarcos.core.di.module.ContextModule;
import br.com.gabrielmarcos.core.di.module.ContextModule_ProvideContextFactory;
import br.com.gabrielmarcos.core.di.module.DatabaseModule;
import br.com.gabrielmarcos.core.di.module.DatabaseModule_ProvideGoalDaoFactory;
import br.com.gabrielmarcos.core.di.module.DatabaseModule_ProvideGoalDatabaseFactory;
import br.com.gabrielmarcos.core.di.module.FirebaseModule;
import br.com.gabrielmarcos.core.di.module.FirebaseModule_ProvideFirebaseAuthFactory;
import br.com.gabrielmarcos.core.di.module.FirebaseModule_ProvideFirebaseDatabaseFactory;
import br.com.gabrielmarcos.core.di.module.FirebaseModule_ProvideGoalsRemoteRepositoryFactory;
import br.com.gabrielmarcos.core.network.repositories.GoalsFirebaseRepository;
import br.com.gabrielmarcos.core.utils.ThemeUtils;
import br.com.gabrielmarcos.core.utils.ThemeUtilsImpl_Factory;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCoreComponent implements CoreComponent {
  private Provider<Context> provideContextProvider;

  private Provider<GoalDatabase> provideGoalDatabaseProvider;

  private Provider<GoalDAO> provideGoalDaoProvider;

  private Provider<ThemeUtils> bindThemeUtilsProvider;

  private Provider<FirebaseDatabase> provideFirebaseDatabaseProvider;

  private Provider<FirebaseAuth> provideFirebaseAuthProvider;

  private Provider<GoalsFirebaseRepository> provideGoalsRemoteRepositoryProvider;

  private DaggerCoreComponent(ContextModule contextModuleParam, DatabaseModule databaseModuleParam,
      FirebaseModule firebaseModuleParam) {

    initialize(contextModuleParam, databaseModuleParam, firebaseModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ContextModule contextModuleParam,
      final DatabaseModule databaseModuleParam, final FirebaseModule firebaseModuleParam) {
    this.provideContextProvider = DoubleCheck.provider(ContextModule_ProvideContextFactory.create(contextModuleParam));
    this.provideGoalDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvideGoalDatabaseFactory.create(databaseModuleParam, provideContextProvider));
    this.provideGoalDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideGoalDaoFactory.create(databaseModuleParam, provideGoalDatabaseProvider));
    this.bindThemeUtilsProvider = DoubleCheck.provider((Provider) ThemeUtilsImpl_Factory.create());
    this.provideFirebaseDatabaseProvider = DoubleCheck.provider(FirebaseModule_ProvideFirebaseDatabaseFactory.create(firebaseModuleParam));
    this.provideFirebaseAuthProvider = DoubleCheck.provider(FirebaseModule_ProvideFirebaseAuthFactory.create(firebaseModuleParam));
    this.provideGoalsRemoteRepositoryProvider = DoubleCheck.provider(FirebaseModule_ProvideGoalsRemoteRepositoryFactory.create(firebaseModuleParam, provideFirebaseDatabaseProvider, provideFirebaseAuthProvider));
  }

  @Override
  public Context context() {
    return provideContextProvider.get();
  }

  @Override
  public GoalDAO goalDAO() {
    return provideGoalDaoProvider.get();
  }

  @Override
  public ThemeUtils themeUtils() {
    return bindThemeUtilsProvider.get();
  }

  @Override
  public GoalsFirebaseRepository goalsRemoteRepository() {
    return provideGoalsRemoteRepositoryProvider.get();
  }

  public static final class Builder {
    private ContextModule contextModule;

    private DatabaseModule databaseModule;

    private FirebaseModule firebaseModule;

    private Builder() {
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public Builder firebaseModule(FirebaseModule firebaseModule) {
      this.firebaseModule = Preconditions.checkNotNull(firebaseModule);
      return this;
    }

    public CoreComponent build() {
      Preconditions.checkBuilderRequirement(contextModule, ContextModule.class);
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (firebaseModule == null) {
        this.firebaseModule = new FirebaseModule();
      }
      return new DaggerCoreComponent(contextModule, databaseModule, firebaseModule);
    }
  }
}
