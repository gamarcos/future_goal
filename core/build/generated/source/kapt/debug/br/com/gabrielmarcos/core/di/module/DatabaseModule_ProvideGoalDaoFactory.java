// Generated by Dagger (https://dagger.dev).
package br.com.gabrielmarcos.core.di.module;

import br.com.gabrielmarcos.core.database.GoalDAO;
import br.com.gabrielmarcos.core.database.GoalDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideGoalDaoFactory implements Factory<GoalDAO> {
  private final DatabaseModule module;

  private final Provider<GoalDatabase> goalDataBaseProvider;

  public DatabaseModule_ProvideGoalDaoFactory(DatabaseModule module,
      Provider<GoalDatabase> goalDataBaseProvider) {
    this.module = module;
    this.goalDataBaseProvider = goalDataBaseProvider;
  }

  @Override
  public GoalDAO get() {
    return provideGoalDao(module, goalDataBaseProvider.get());
  }

  public static DatabaseModule_ProvideGoalDaoFactory create(DatabaseModule module,
      Provider<GoalDatabase> goalDataBaseProvider) {
    return new DatabaseModule_ProvideGoalDaoFactory(module, goalDataBaseProvider);
  }

  public static GoalDAO provideGoalDao(DatabaseModule instance, GoalDatabase goalDataBase) {
    return Preconditions.checkNotNull(instance.provideGoalDao(goalDataBase), "Cannot return null from a non-@Nullable @Provides method");
  }
}
