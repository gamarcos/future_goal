// Generated by Dagger (https://dagger.dev).
package br.com.gabrielmarcos.core.di.module;

import br.com.gabrielmarcos.core.network.repositories.GoalsFirebaseRepository;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FirebaseModule_ProvideGoalsRemoteRepositoryFactory implements Factory<GoalsFirebaseRepository> {
  private final FirebaseModule module;

  private final Provider<FirebaseDatabase> firebaseDatabaseProvider;

  private final Provider<FirebaseAuth> firebaseAuthProvider;

  public FirebaseModule_ProvideGoalsRemoteRepositoryFactory(FirebaseModule module,
      Provider<FirebaseDatabase> firebaseDatabaseProvider,
      Provider<FirebaseAuth> firebaseAuthProvider) {
    this.module = module;
    this.firebaseDatabaseProvider = firebaseDatabaseProvider;
    this.firebaseAuthProvider = firebaseAuthProvider;
  }

  @Override
  public GoalsFirebaseRepository get() {
    return provideGoalsRemoteRepository(module, firebaseDatabaseProvider.get(), firebaseAuthProvider.get());
  }

  public static FirebaseModule_ProvideGoalsRemoteRepositoryFactory create(FirebaseModule module,
      Provider<FirebaseDatabase> firebaseDatabaseProvider,
      Provider<FirebaseAuth> firebaseAuthProvider) {
    return new FirebaseModule_ProvideGoalsRemoteRepositoryFactory(module, firebaseDatabaseProvider, firebaseAuthProvider);
  }

  public static GoalsFirebaseRepository provideGoalsRemoteRepository(FirebaseModule instance,
      FirebaseDatabase firebaseDatabase, FirebaseAuth firebaseAuth) {
    return Preconditions.checkNotNull(instance.provideGoalsRemoteRepository(firebaseDatabase, firebaseAuth), "Cannot return null from a non-@Nullable @Provides method");
  }
}
