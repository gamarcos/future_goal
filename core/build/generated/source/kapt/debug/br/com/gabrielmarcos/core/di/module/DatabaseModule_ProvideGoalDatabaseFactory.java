// Generated by Dagger (https://dagger.dev).
package br.com.gabrielmarcos.core.di.module;

import android.content.Context;
import br.com.gabrielmarcos.core.database.GoalDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideGoalDatabaseFactory implements Factory<GoalDatabase> {
  private final DatabaseModule module;

  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideGoalDatabaseFactory(DatabaseModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public GoalDatabase get() {
    return provideGoalDatabase(module, contextProvider.get());
  }

  public static DatabaseModule_ProvideGoalDatabaseFactory create(DatabaseModule module,
      Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideGoalDatabaseFactory(module, contextProvider);
  }

  public static GoalDatabase provideGoalDatabase(DatabaseModule instance, Context context) {
    return Preconditions.checkNotNull(instance.provideGoalDatabase(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
