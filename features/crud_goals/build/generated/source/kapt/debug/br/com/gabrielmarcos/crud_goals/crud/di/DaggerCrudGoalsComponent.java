// Generated by Dagger (https://dagger.dev).
package br.com.gabrielmarcos.crud_goals.crud.di;

import br.com.gabrielmarcos.core.database.GoalDAO;
import br.com.gabrielmarcos.core.database.GoalDatabaseRepository;
import br.com.gabrielmarcos.core.database.GoalDatabaseRepository_Factory;
import br.com.gabrielmarcos.core.di.CoreComponent;
import br.com.gabrielmarcos.core.network.repositories.GoalsFirebaseRepository;
import br.com.gabrielmarcos.crud_goals.crud.ui.CrudGoalsFragment;
import br.com.gabrielmarcos.crud_goals.crud.ui.CrudGoalsFragment_MembersInjector;
import br.com.gabrielmarcos.crud_goals.crud.ui.CrudGoalsViewModel;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCrudGoalsComponent implements CrudGoalsComponent {
  private Provider<GoalDAO> goalDAOProvider;

  private Provider<GoalDatabaseRepository> goalDatabaseRepositoryProvider;

  private Provider<GoalsFirebaseRepository> goalsRemoteRepositoryProvider;

  private Provider<CrudGoalsViewModel> providesInsertGoalsFragmentProvider;

  private DaggerCrudGoalsComponent(CrudGoalsModule crudGoalsModuleParam,
      CoreComponent coreComponentParam) {

    initialize(crudGoalsModuleParam, coreComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final CrudGoalsModule crudGoalsModuleParam,
      final CoreComponent coreComponentParam) {
    this.goalDAOProvider = new br_com_gabrielmarcos_core_di_CoreComponent_goalDAO(coreComponentParam);
    this.goalDatabaseRepositoryProvider = GoalDatabaseRepository_Factory.create(goalDAOProvider);
    this.goalsRemoteRepositoryProvider = new br_com_gabrielmarcos_core_di_CoreComponent_goalsRemoteRepository(coreComponentParam);
    this.providesInsertGoalsFragmentProvider = DoubleCheck.provider(CrudGoalsModule_ProvidesInsertGoalsFragmentFactory.create(crudGoalsModuleParam, goalDatabaseRepositoryProvider, goalsRemoteRepositoryProvider));
  }

  @Override
  public void inject(CrudGoalsFragment crudGoalsFragment) {
    injectCrudGoalsFragment(crudGoalsFragment);
  }

  private CrudGoalsFragment injectCrudGoalsFragment(CrudGoalsFragment instance) {
    CrudGoalsFragment_MembersInjector.injectViewModel(instance, providesInsertGoalsFragmentProvider.get());
    return instance;
  }

  public static final class Builder {
    private CrudGoalsModule crudGoalsModule;

    private CoreComponent coreComponent;

    private Builder() {
    }

    public Builder crudGoalsModule(CrudGoalsModule crudGoalsModule) {
      this.crudGoalsModule = Preconditions.checkNotNull(crudGoalsModule);
      return this;
    }

    public Builder coreComponent(CoreComponent coreComponent) {
      this.coreComponent = Preconditions.checkNotNull(coreComponent);
      return this;
    }

    public CrudGoalsComponent build() {
      Preconditions.checkBuilderRequirement(crudGoalsModule, CrudGoalsModule.class);
      Preconditions.checkBuilderRequirement(coreComponent, CoreComponent.class);
      return new DaggerCrudGoalsComponent(crudGoalsModule, coreComponent);
    }
  }

  private static class br_com_gabrielmarcos_core_di_CoreComponent_goalDAO implements Provider<GoalDAO> {
    private final CoreComponent coreComponent;

    br_com_gabrielmarcos_core_di_CoreComponent_goalDAO(CoreComponent coreComponent) {
      this.coreComponent = coreComponent;
    }

    @Override
    public GoalDAO get() {
      return Preconditions.checkNotNull(coreComponent.goalDAO(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class br_com_gabrielmarcos_core_di_CoreComponent_goalsRemoteRepository implements Provider<GoalsFirebaseRepository> {
    private final CoreComponent coreComponent;

    br_com_gabrielmarcos_core_di_CoreComponent_goalsRemoteRepository(CoreComponent coreComponent) {
      this.coreComponent = coreComponent;
    }

    @Override
    public GoalsFirebaseRepository get() {
      return Preconditions.checkNotNull(coreComponent.goalsRemoteRepository(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
